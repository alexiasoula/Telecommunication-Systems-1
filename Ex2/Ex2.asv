clear all; close all; clc
%Function for A.2
function [X] = bits_to_2PAM(n)
    b = (sign(randn(n, 1)) + 1)/2;
    for i = 1 : n
        if b(i) == 0
            X(i) = 1;
        else 
            X(i) = -1;
        end
    end
end
%Function for A.4
function [X] = bits_to_4PAM(n)
    b1 = (sign(randn(n, 1)) + 1)/2;
    b2 = (sign(randn(n, 1)) + 1)/2;

    bString = strcat(num2str(b2),num2str(b1));
    b = str2num(bString);

    for i = 1 : n
        if b(i) == 00
            X(i) = 3;
        elseif b(i) == 01
            X(i) = 1;
        elseif b(i) == 11
            X(i) = -1;
        else
            X(i) = -3;
        end
    end
end

%A1
T= 10^(-2);
over = 10;
Ts = T/over;
A=4;
a=0.5;

[phi,t] = srrc_pulse(T,over,A,a);

Nf=2048;
Fs = 1/Ts;
f_axis = linspace(-Fs/2,Fs/2-Fs/Nf,Nf);
F_axis = Fs*f_axis;

PHI = fftshift(fft(phi,Nf))*Ts;
XF_abs = abs(PHI);
PHI_psd = XF_abs.^2;

figure(Name="A.1");
semilogy(F_axis,PHI_psd);
grid on;
title("Power Spectral Denstity");
xlabel('Frequency');
ylabel('Amplitude');

%A.2
N = 100;
X = bits_to_2PAM(N);

figure(Name="A.2 bits to 2 PAM");
stem(X);
grid on;
title("Bits to 2PAM");
xlabel('Time');
ylabel('Amplitude');

X_delta = 1/Ts*upsample(X, over);
t_delta = [0 : Ts : (N * T) - Ts];

X_t = conv(X_delta,phi)*Ts;
t_conv = t(1)+t_delta(1):Ts:t(end)+t_delta(end);

figure(Name="A.2 Conv");
plot(t_conv,X_t,'r');
grid on;
title("Signal X(t)");
xlabel('Time');
ylabel('Amplitude');

S_x = (var(X)/T)*PHI_psd;

%A.3
X_F = fftshift(fft(X_t,Nf))*Ts;

T_total = max(t_conv)- min(t_conv)+1;

Px_F = (abs(X_F)).^2 / T_total;

figure(Name="A.3 P_x(F)");
subplot(2,1,1);
plot(F_axis,Px_F);
grid on;
title("Px(F) of signal X(t)");
xlabel('Frequency');
ylabel('Amplitude');

subplot(2,1,2);
semilogy(F_axis,Px_F);
grid on;
title("Px(F) of signal X(t) [semilogy]");
xlabel('Frequency');
ylabel('Amplitude');

k=500;

X_tests = zeros(k,Nf);
for i=1:k
    X_test = bits_to_2PAM(N);
    X_delta_test = 1/Ts*upsample(X_test, over);
    X_t_test = conv(X_delta_test,phi)*Ts;
    X_F_test = fftshift(fft(X_t_test,Nf))*Ts;
    XF_abs_test = abs(X_F_test);
    XF_psd_test = XF_abs_test.^2;
    X_tests(i,:)=XF_psd_test;
end

Sx_tests = mean(X_tests);

figure(Name="A.3 After tests");
semilogy(F_axis,S_x,'b');
hold on;
semilogy(F_axis,Sx_tests,'r');
hold off;
grid on;
title("Power Spectral Density");
xlabel('Frequency');
ylabel('Amplitude');
legend("Theoretical","Tests");

%A.4
X4 = 